name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true

jobs:
  createVersions:
    name: Handles the version
    runs-on: ubuntu-latest
    steps:
      - name: 'Create version files'
        id: version
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          echo $RELEASE_VERSION > RELEASE_VERSION

      - name: 'Upload version files'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            *_VERSION

  build:
    needs: [ createVersions ]
    name: graalVM ${{ matrix.version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version: [ latest ]   # Append other graalVM versions as needed; e.g. [latest, dev, '22.0.0.2']
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download All Artifacts
        uses: actions/download-artifact@v2

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ matrix.version }}
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Cache Maven'
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 'Export versions'
        run: |
          export RELEASE_VERSION=`cat artifacts/RELEASE_VERSION`
          export VERSIONING_GIT_BRANCH=cicd_automaticVersioning
          echo "RELEASE_VERSION = $RELEASE_VERSION"

      - name: Build Native Image
        run: mvn -B --file pom.xml clean package -Pnative

      - name: 'Create distribution'
        run: mvn -B --file pom.xml -Pdist package -DskipTests

      - name: Upload Distribution
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            target/distributions/*.zip
            target/distributions/*.tar.gz


  release:
    needs: [ build ]
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: 'Cache Maven'
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download All Artifacts
        uses: actions/download-artifact@v2

      - name: 'Export versions'
        run: |
          export RELEASE_VERSION=`cat artifacts/RELEASE_VERSION`
          export VERSIONING_GIT_BRANCH=cicd_automaticVersioning
          echo "RELEASE_VERSION = $RELEASE_VERSION"

      - name: List Resources
        run: |
          ls -al artifacts

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -B --file pom.xml -Prelease -Djreleaser.dry.run=true -DartifactsDir=artifacts jreleaser:full-release

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
